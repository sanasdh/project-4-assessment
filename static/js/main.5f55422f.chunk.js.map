{"version":3,"sources":["components/CircleSelector/CircleSelector.js","components/Circles/Circles.js","App.js","serviceWorker.js","index.js"],"names":["CircleSelector","props","circle1","className","value","onClick","handleCricle","circle2","circle3","circle4","Circles","App","e","console","log","target","setState","state","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5f55422f.chunk.js","sourcesContent":["import React from 'react'\r\nimport './CircleSelector.css'\r\n\r\n\r\nfunction CircleSelector(props) {\r\n  if (props.circle1) {\r\n    return (\r\n      <div className=\"CircleSelector\">\r\n        <button value=\"circle1\" onClick={props.handleCricle}\r\n          className={props.circle1 ? 'selected' : ''} > CIRCLE 1 SELECTED</button>\r\n        <button value=\"circle2\" onClick={props.handleCricle}\r\n          className={props.circle2 ? 'selected' : ''}> SELECT CIRCLE 2</button>\r\n        <button value=\"circle3\" onClick={props.handleCricle}\r\n          className={props.circle3 ? 'selected' : ''}> SELECT CIRCLE 3</button>\r\n        <button value=\"circle4\" onClick={props.handleCricle}\r\n          className={props.circle4 ? 'selected' : ''}> SELECT CIRCLE 4</button>\r\n\r\n      </div >\r\n    )\r\n  }\r\n  else if (props.circle2) {\r\n    return (\r\n      <div className=\"CircleSelector\">\r\n        <button value=\"circle1\" onClick={props.handleCricle}\r\n          className={props.circle1 ? 'selected' : ''} > SELECT CIRCLE 1</button>\r\n        <button value=\"circle2\" onClick={props.handleCricle}\r\n          className={props.circle2 ? 'selected' : ''}> CIRCLE 2 SELECTED</button>\r\n        <button value=\"circle3\" onClick={props.handleCricle}\r\n          className={props.circle3 ? 'selected' : ''}> SELECT CIRCLE 3 </button>\r\n        <button value=\"circle4\" onClick={props.handleCricle}\r\n          className={props.circle4 ? 'selected' : ''}> SELECT CIRCLE 4</button>\r\n\r\n      </div >\r\n    )\r\n  }\r\n\r\n  else if (props.circle3) {\r\n    return (\r\n      <div className=\"CircleSelector\">\r\n        <button value=\"circle1\" onClick={props.handleCricle}\r\n          className={props.circle1 ? 'selected' : ''} > SELECT CIRCLE 1</button>\r\n        <button value=\"circle2\" onClick={props.handleCricle}\r\n          className={props.circle2 ? 'selected' : ''}> SELECT CIRCLE 2</button>\r\n        <button value=\"circle3\" onClick={props.handleCricle}\r\n          className={props.circle3 ? 'selected' : ''}> CIRCLE 3 SELECTED</button>\r\n        <button value=\"circle4\" onClick={props.handleCricle}\r\n          className={props.circle4 ? 'selected' : ''}> SELECT CIRCLE 4</button>\r\n\r\n      </div >\r\n    )\r\n  }\r\n\r\n  else if (props.circle4) {\r\n    return (\r\n      <div className=\"CircleSelector\">\r\n        <button value=\"circle1\" onClick={props.handleCricle}\r\n          className={props.circle1 ? 'selected' : ''} > SELECT CIRCLE 1</button>\r\n        <button value=\"circle2\" onClick={props.handleCricle}\r\n          className={props.circle2 ? 'selected' : ''}> SELECT CIRCLE 2</button>\r\n        <button value=\"circle3\" onClick={props.handleCricle}\r\n          className={props.circle3 ? 'selected' : ''}> SELECT CIRCLE 3</button>\r\n        <button value=\"circle4\" onClick={props.handleCricle}\r\n          className={props.circle4 ? 'selected' : ''}> CIRCLE 4 SELECTED</button>\r\n\r\n      </div >\r\n    )\r\n  }\r\n\r\n}\r\nexport default CircleSelector;","import React from 'react'\r\nimport './Circles.css'\r\n\r\nfunction Circles(props) {\r\n  return (\r\n    <div className=\"Circles\">\r\n      <div className={props.circle1 ? 'selected' : ''}>1</div>\r\n      <div className={props.circle2 ? 'selected' : ''}>2</div>\r\n      <div className={props.circle3 ? 'selected' : ''}>3</div>\r\n      <div className={props.circle4 ? 'selected' : ''}>4</div>\r\n\r\n    </div>\r\n  )\r\n}\r\nexport default Circles;","import React, { Component } from 'react';\nimport './App.css';\nimport CircleSelector from './components/CircleSelector/CircleSelector'\nimport Circles from './components/Circles/Circles'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      circle1: true,\n      circle2: false,\n      circle3: false,\n      circle4: false,\n    }\n  }\n  handleCricle = (e) => {\n    // e.preventDefault()\n    console.log(\"e\", e);\n    console.log(\"e\", e.target);\n    console.log(\"e\", e.target.value);\n    this.setState({\n      circle1: false,\n      circle2: false,\n      circle3: false,\n      circle4: false,\n      [e.target.value]: true\n    })\n    console.log(\"Circles2\", this.state.circle2);\n    console.log(\"Circles1\", this.state.circle1);\n\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">UNIT 4 FINAL ASSESSMENT</header>\n        <main>\n          <CircleSelector\n            handleCricle={this.handleCricle}\n            circle1={this.state.circle1}\n            circle2={this.state.circle2}\n            circle3={this.state.circle3}\n            circle4={this.state.circle4}\n          />\n          <Circles\n            circle1={this.state.circle1}\n            circle2={this.state.circle2}\n            circle3={this.state.circle3}\n            circle4={this.state.circle4} />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}